//Generated by ahl
#include "../TemporalAA.h"
#include <memory>
#include <Inc/Objects/Type.h>
using namespace Ailu;
Ailu::Type* Ailu::Z_Construct_TemporalAA_Type()
{
static std::unique_ptr<Ailu::Type> cur_type = nullptr;
if(cur_type == nullptr)
{
TypeInitializer initializer;
initializer._name = "TemporalAA";
initializer._size = sizeof(TemporalAA);
initializer._full_name = "Ailu::TemporalAA";
initializer._is_class = true;
initializer._is_abstract = false;
initializer._namespace = "Ailu";
initializer._base_name = "Ailu::RenderFeature";
Meta meta_history_factor;
meta_history_factor._category="";
meta_history_factor._min=(float)0;
meta_history_factor._max=(float)1;
meta_history_factor._is_range=true;
meta_history_factor._is_float_range=true;
meta_history_factor._is_color=false;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_history_factor","f32", false, true,offsetof(TemporalAA,_history_factor),&TemporalAA::_history_factor,meta_history_factor,false));
Meta meta_jitter_scale;
meta_jitter_scale._category="";
meta_jitter_scale._min=(float)0;
meta_jitter_scale._max=(float)1;
meta_jitter_scale._is_range=true;
meta_jitter_scale._is_float_range=true;
meta_jitter_scale._is_color=false;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_jitter_scale","f32", false, true,offsetof(TemporalAA,_jitter_scale),&TemporalAA::_jitter_scale,meta_jitter_scale,false));
Meta meta_clamp_quality;
meta_clamp_quality._category="";
meta_clamp_quality._min=(float)0;
meta_clamp_quality._max=(float)2;
meta_clamp_quality._is_range=true;
meta_clamp_quality._is_float_range=true;
meta_clamp_quality._is_color=false;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_clamp_quality","f32", false, true,offsetof(TemporalAA,_clamp_quality),&TemporalAA::_clamp_quality,meta_clamp_quality,false));
Meta meta_history_quality;
meta_history_quality._category="";
meta_history_quality._min=(float)0;
meta_history_quality._max=(float)2;
meta_history_quality._is_range=true;
meta_history_quality._is_float_range=true;
meta_history_quality._is_color=false;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_history_quality","f32", false, true,offsetof(TemporalAA,_history_quality),&TemporalAA::_history_quality,meta_history_quality,false));
Meta meta_motion_quality;
meta_motion_quality._category="";
meta_motion_quality._min=(float)0;
meta_motion_quality._max=(float)2;
meta_motion_quality._is_range=true;
meta_motion_quality._is_float_range=true;
meta_motion_quality._is_color=false;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_motion_quality","f32", false, true,offsetof(TemporalAA,_motion_quality),&TemporalAA::_motion_quality,meta_motion_quality,false));
Meta meta_variance_clip_scale;
meta_variance_clip_scale._category="";
meta_variance_clip_scale._min=(float)0;
meta_variance_clip_scale._max=(float)2;
meta_variance_clip_scale._is_range=true;
meta_variance_clip_scale._is_float_range=true;
meta_variance_clip_scale._is_color=false;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_variance_clip_scale","f32", false, true,offsetof(TemporalAA,_variance_clip_scale),&TemporalAA::_variance_clip_scale,meta_variance_clip_scale,false));
Meta meta_sharpness;
meta_sharpness._category="";
meta_sharpness._min=(float)0;
meta_sharpness._max=(float)4;
meta_sharpness._is_range=true;
meta_sharpness._is_float_range=true;
meta_sharpness._is_color=false;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_sharpness","f32", false, true,offsetof(TemporalAA,_sharpness),&TemporalAA::_sharpness,meta_sharpness,false));
cur_type = std::make_unique<Ailu::Type>(initializer);
Ailu::Type::RegisterType(cur_type.get());
}
return cur_type.get();
}

Ailu::Type* TemporalAA::GetPrivateStaticClass()
{
	static Ailu::Type* type = Z_Construct_TemporalAA_Type();
	return type;
}

    const Type *TemporalAA::GetType() const
{
return TemporalAA::GetPrivateStaticClass();
}
