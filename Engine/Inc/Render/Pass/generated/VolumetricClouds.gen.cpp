//Generated by ahl
#include "../VolumetricClouds.h"
#include <memory>
#include <Inc/Objects/Type.h>
using namespace Ailu;
Ailu::Type* Ailu::Z_Construct_VolumetricClouds_Type()
{
static std::unique_ptr<Ailu::Type> cur_type = nullptr;
if(cur_type == nullptr)
{
TypeInitializer initializer;
initializer._name = "VolumetricClouds";
initializer._size = sizeof(VolumetricClouds);
initializer._full_name = "Ailu::VolumetricClouds";
initializer._is_class = true;
initializer._is_abstract = false;
initializer._namespace = "Ailu";
initializer._base_name = "Ailu::RenderFeature";
Meta meta_is_tile_render;
meta_is_tile_render._category="Base";
meta_is_tile_render._min=(float)0;
meta_is_tile_render._max=(float)1;
meta_is_tile_render._is_range=false;
meta_is_tile_render._is_float_range=true;
meta_is_tile_render._is_color=false;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_is_tile_render","bool", false, true,offsetof(VolumetricClouds,_is_tile_render),&VolumetricClouds::_is_tile_render,meta_is_tile_render,false));
Meta meta_is_high_quality;
meta_is_high_quality._category="Base";
meta_is_high_quality._min=(float)0;
meta_is_high_quality._max=(float)1;
meta_is_high_quality._is_range=false;
meta_is_high_quality._is_float_range=true;
meta_is_high_quality._is_color=false;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_is_high_quality","bool", false, true,offsetof(VolumetricClouds,_is_high_quality),&VolumetricClouds::_is_high_quality,meta_is_high_quality,false));
Meta meta_height;
meta_height._category="Base";
meta_height._min=(float)0;
meta_height._max=(float)5000;
meta_height._is_range=true;
meta_height._is_float_range=true;
meta_height._is_color=false;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_height","f32", false, true,offsetof(VolumetricClouds,_height),&VolumetricClouds::_height,meta_height,false));
Meta meta_thickness;
meta_thickness._category="Base";
meta_thickness._min=(float)100;
meta_thickness._max=(float)10000;
meta_thickness._is_range=true;
meta_thickness._is_float_range=true;
meta_thickness._is_color=false;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_thickness","f32", false, true,offsetof(VolumetricClouds,_thickness),&VolumetricClouds::_thickness,meta_thickness,false));
Meta meta_absorbtion;
meta_absorbtion._category="Base";
meta_absorbtion._min=(float)0;
meta_absorbtion._max=(float)1;
meta_absorbtion._is_range=false;
meta_absorbtion._is_float_range=true;
meta_absorbtion._is_color=true;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_absorbtion","Color", false, true,offsetof(VolumetricClouds,_absorbtion),&VolumetricClouds::_absorbtion,meta_absorbtion,false));
Meta meta_scattering;
meta_scattering._category="Base";
meta_scattering._min=(float)0;
meta_scattering._max=(float)1;
meta_scattering._is_range=false;
meta_scattering._is_float_range=true;
meta_scattering._is_color=true;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_scattering","Color", false, true,offsetof(VolumetricClouds,_scattering),&VolumetricClouds::_scattering,meta_scattering,false));
Meta meta_speed;
meta_speed._category="Base";
meta_speed._min=(float)0;
meta_speed._max=(float)50;
meta_speed._is_range=true;
meta_speed._is_float_range=true;
meta_speed._is_color=false;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_speed","f32", false, true,offsetof(VolumetricClouds,_speed),&VolumetricClouds::_speed,meta_speed,false));
Meta meta_exposure;
meta_exposure._category="Base";
meta_exposure._min=(float)0;
meta_exposure._max=(float)10;
meta_exposure._is_range=true;
meta_exposure._is_float_range=true;
meta_exposure._is_color=false;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_exposure","f32", false, true,offsetof(VolumetricClouds,_exposure),&VolumetricClouds::_exposure,meta_exposure,false));
Meta meta_type_offset;
meta_type_offset._category="Base";
meta_type_offset._min=(float)-1;
meta_type_offset._max=(float)1;
meta_type_offset._is_range=true;
meta_type_offset._is_float_range=true;
meta_type_offset._is_color=false;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_type_offset","f32", false, true,offsetof(VolumetricClouds,_type_offset),&VolumetricClouds::_type_offset,meta_type_offset,false));
Meta meta_density_multiplier;
meta_density_multiplier._category="Base";
meta_density_multiplier._min=(float)0;
meta_density_multiplier._max=(float)4;
meta_density_multiplier._is_range=true;
meta_density_multiplier._is_float_range=true;
meta_density_multiplier._is_color=false;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_density_multiplier","f32", false, true,offsetof(VolumetricClouds,_density_multiplier),&VolumetricClouds::_density_multiplier,meta_density_multiplier,false));
Meta meta_threshold;
meta_threshold._category="Base";
meta_threshold._min=(float)0;
meta_threshold._max=(float)1;
meta_threshold._is_range=true;
meta_threshold._is_float_range=true;
meta_threshold._is_color=false;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_threshold","f32", false, true,offsetof(VolumetricClouds,_threshold),&VolumetricClouds::_threshold,meta_threshold,false));
cur_type = std::make_unique<Ailu::Type>(initializer);
Ailu::Type::RegisterType(cur_type.get());
}
return cur_type.get();
}

Ailu::Type* VolumetricClouds::GetPrivateStaticClass()
{
	static Ailu::Type* type = Z_Construct_VolumetricClouds_Type();
	return type;
}

    const Type *VolumetricClouds::GetType() const
{
return VolumetricClouds::GetPrivateStaticClass();
}
