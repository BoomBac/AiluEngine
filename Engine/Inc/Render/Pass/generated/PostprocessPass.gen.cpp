//Generated by ahl
#include "../PostprocessPass.h"
#include <memory>
#include <Inc/Objects/Type.h>
using namespace Ailu;
Ailu::Type* Ailu::Z_Construct_PostProcessPass_Type()
{
static std::unique_ptr<Ailu::Type> cur_type = nullptr;
if(cur_type == nullptr)
{
TypeInitializer initializer;
initializer._name = "PostProcessPass";
initializer._size = sizeof(PostProcessPass);
initializer._full_name = "Ailu::PostProcessPass";
initializer._is_class = true;
initializer._is_abstract = false;
initializer._namespace = "Ailu";
initializer._base_name = "Ailu::RenderPass";
Meta meta_upsample_radius;
meta_upsample_radius._category="";
meta_upsample_radius._min=(float)0;
meta_upsample_radius._max=(float)1;
meta_upsample_radius._is_range=false;
meta_upsample_radius._is_float_range=true;
meta_upsample_radius._is_color=false;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_upsample_radius","f32", false, true,offsetof(PostProcessPass,_upsample_radius),&PostProcessPass::_upsample_radius,meta_upsample_radius,false));
Meta meta_bloom_intensity;
meta_bloom_intensity._category="";
meta_bloom_intensity._min=(float)0;
meta_bloom_intensity._max=(float)1;
meta_bloom_intensity._is_range=false;
meta_bloom_intensity._is_float_range=true;
meta_bloom_intensity._is_color=false;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_bloom_intensity","f32", false, true,offsetof(PostProcessPass,_bloom_intensity),&PostProcessPass::_bloom_intensity,meta_bloom_intensity,false));
Meta meta_is_use_blur;
meta_is_use_blur._category="";
meta_is_use_blur._min=(float)0;
meta_is_use_blur._max=(float)1;
meta_is_use_blur._is_range=false;
meta_is_use_blur._is_float_range=true;
meta_is_use_blur._is_color=false;
initializer._properties.emplace_back(MemberInfoInitializer(EMemberType::kProperty,"_is_use_blur","bool", false, true,offsetof(PostProcessPass,_is_use_blur),&PostProcessPass::_is_use_blur,meta_is_use_blur,false));
cur_type = std::make_unique<Ailu::Type>(initializer);
Ailu::Type::RegisterType(cur_type.get());
}
return cur_type.get();
}

Ailu::Type* PostProcessPass::GetPrivateStaticClass()
{
	static Ailu::Type* type = Z_Construct_PostProcessPass_Type();
	return type;
}

    const Type *PostProcessPass::GetType() const
{
return PostProcessPass::GetPrivateStaticClass();
}
